## invoke with:
## alias csnake='snakemake -j 1000 --cluster-config cluster.yaml --cluster "sbatch -J {rule} -p {cluster.p} --gres {cluster.gres} -n {cluster.n} -t {cluster.t} -c {cluster.c} --mem {cluster.mem} -o slurm/slurm-%j.out -e slurm/slurm-%j.err" '
## (that's now in bashrc. e.g. usage below)
## csnake train_flower_n2gt
# from types import SimpleNamespace
# from utils import flatten, recursive_map2

# import files as F
from files import *

localrules: runall

wildcard_constraints:
  k = '[0-9]{1,3}',
  ed = 'e0[23]'

rule runall:
  input: flies_pred #train_ce, pts_ce, pred_ce, denoise_pred_ce

rule flydetect:
  input: fly_raw_wc
  output: fly_pred_wc
  run:
    import predict
    predict.fly_centers(input[0],output[0])


rule predict:
  input:  wc_raw_ce, wc_train_ce
  output: wc_pred_ce
  run:
    import predict
    predict.centers(input[0],input[1],output[0])

rule denoise_predict:
  input: wc_raw_ce, denoise_wc_train_ce
  output: denoise_wc_pred_ce
  run:
    import predict
    predict.denoise(input[0],input[1],output[0])

rule predict_pts:
  input: wc_pts_input_250
  output: wc_pts_ce
  run:
    import predict
    predict.points(input,output[0])

rule train:
  output: wc_train_ce
  run:
    import detect
    savedir = Path(output[0]).parent.parent
    m,d,td,ta = detect.init(savedir,int(wildcards.k))
    detect.train(m,d,td,ta)
    
# rule denoise_train:
#   output: wc_denoise_retina
#   run:
#     import denoise
#     savedir = Path(output[0]).parent.parent
#     m,d,td,ta = denoise.init(savedir,int(wildcards.k))
#     denoise.train(m,d,td,ta)





