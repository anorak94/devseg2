## invoke with:
## alias csnake='snakemake -j 1000 --cluster-config cluster.yaml --cluster "sbatch -J {rule} -p {cluster.p} --gres {cluster.gres} -n {cluster.n} -t {cluster.t} -c {cluster.c} --mem {cluster.mem}" '
## (that's now in bashrc. e.g. usage below)
## csnake train_flower_n2gt
# from types import SimpleNamespace
# from utils import flatten, recursive_map2

# import files as F
from files import *

localrules: runall

wildcard_constraints:
  k = '[0-9]{1,3}'

rule runall:
  input: pts_ce #train_ce, pts_ce, pred_ce

rule predict:
  input:  wc_raw_ce, wc_train_ce
  output: wc_pred_ce
  run:
    import predict
    import torch
    import torch_models
    import tifffile
    from torch import nn
    from segtools.numpy_utils import normalize3
    import numpy as np
    outdir = Path(output[0]).parent; outdir.mkdir(exist_ok=True,parents=True)
    net = torch_models.Unet3(16,[[1],[1]],finallayer=nn.Sequential).cuda()
    net.load_state_dict(torch.load(input[1]))
    img = tifffile.imread(input[0])
    img = normalize3(img,2,99.6)
    res = predict.apply_net_tiled_3d(net,img[None])[0]
    tifffile.imsave(output[0],res.astype(np.float16),compress=0)

rule predict_pts:
  input: wc_pts_input_250
  output: wc_pts_ce
  run:
    import tifffile
    from skimage.feature  import peak_local_max
    from skimage.measure  import regionprops
    import numpy as np
    from scipy.ndimage import label
    from ns2dir import load,save
    import itertools
    from segtools.render import get_fnz_idx2d

    traj = []
    mids = []
    zcolordir = Path(output[0].replace("pts/","zcolor/")).parent

    for i,file in enumerate(input):
      res = tifffile.imread(file).astype(np.float32)
      zcolor = (1+get_fnz_idx2d(res>0.3)).astype(np.uint8)
      save(zcolor, zcolordir / f'p{i:03d}.png')
      di  = dict()
      for th,fp in itertools.product([0.3], [30]):
        pts = peak_local_max(res,threshold_abs=th,exclude_border=False,footprint=np.ones((3,fp,fp)))
        di[(th,fp)] = pts
      traj.append(di)
    save(traj,output[0])

rule train:
  output: wc_train_ce
  run:
    import detect
    savedir = Path(output[0]).parent.parent
    m,d,td,ta = detect.init(savedir,int(wildcards.k))
    detect.train(m,d,td,ta)
    





